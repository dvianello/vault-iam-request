---
# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  test:
    docker:
      - image: circleci/golang:1.10.0

    environment:
      - GOCACHE: "/tmp/go/cache"
      - DEP_VERSION: 0.5.0
      - TEST_RESULTS: "/tmp/test-results"

    working_directory: /go/src/github.com/dvianello/vault-iam-request

    steps:
      - checkout

      - restore_cache:
          key: gopkg-{{ .Branch }}-{{ checksum "Gopkg.lock" }}
          paths:
            - /go/src/github.com/dvianello/vault-iam-request/vendor

      - run:
          name: Download dependencies
          command: |
            if [ ! -d /go/src/github.com/dvianello/vault-iam-request/vendor ]; then
              curl -L -s https://github.com/golang/dep/releases/download/v${DEP_VERSION}/dep-linux-amd64 -o /go/bin/dep
              chmod +x /go/bin/dep
              /go/bin/dep ensure
            fi

      - run:
          name: Download required Go packages
          command: |
            go get github.com/jstemmer/go-junit-report
            go get github.com/mattn/goveralls

      - save_cache:
          key: gopkg-{{ .Branch }}-{{ checksum "Gopkg.lock" }}
          paths:
            - /go/src/github.com/dvianello/vault-iam-request/vendor

      - restore_cache:
          keys:
            - build-cache-{{ .Branch }}-{{ .Environment.CIRCLE_PREVIOUS_BUILD_NUM }}
          paths:
            - /tmp/go/cache

      - run:
          name: Create folder to store test results
          command: mkdir -p ${TEST_RESULTS}

      - run:
          name: Run unit tests
          command: |
            mkdir -p $GOCACHE
            mkdir -p ${TEST_RESULTS}/{gotest,coveralls}
            trap "go-junit-report <${TEST_RESULTS}/gotest/go-test.out > ${TEST_RESULTS}/gotest/go-test-report.xml" EXIT
            go test -v -cover -coverprofile=${TEST_RESULTS}/coveralls/coverage.out | tee ${TEST_RESULTS}/gotest/go-test.out
            goveralls -coverprofile=${TEST_RESULTS}/coveralls/coverage.out -service=circle-ci -repotoken=$COVERALLS_TOKEN

      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output

      - store_test_results:
          path: /tmp/test-results/

  build:
    docker:
      # specify the version
      - image: circleci/golang:1.10.0

    environment:
      - GOCACHE: "/tmp/go/cache"
      - DEP_VERSION: 0.5.0
      - TEST_RESULTS: "/tmp/test-results"

    working_directory: /go/src/github.com/dvianello/vault-iam-request
    steps:
      - checkout

      - run:
          name: Download dependencies
          command: |
            go get github.com/mitchellh/gox
            go get github.com/tcnksm/ghr
            apt-get install -y upx

      - restore_cache:
          key: gopkg-{{ .Branch }}-{{ checksum "Gopkg.lock" }}
          paths:
            - /go/src/github.com/dvianello/vault-iam-request/vendor

      - restore_cache:
          keys:
            - build-cache-{{ .Branch }}-{{ .Environment.CIRCLE_PREVIOUS_BUILD_NUM }}
          paths:
            - /tmp/go/cache

      - run:
          name: Build
          command: |
            build_scripts/build.sh

      - save_cache:
          key: build-cache-{{ .Branch }}-{{ .Environment.CIRCLE_BUILD_NUM }}
          paths:
            - /tmp/go/cache


workflows:
  version: 2
  test-build:
    jobs:
      - test:
          filters:  # required since `deploy` has tag filters AND requires `build`
            tags:
              only: /.*/
      - build:
          requires:
            - test
          filters:
            tags:
              only: /[0-9]\.[0-9]\.[0-9]/
            branches:
              ignore: /.*/
